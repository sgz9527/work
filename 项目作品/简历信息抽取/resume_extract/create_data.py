# coding=utf-8
import random
from special_string import *
import re
from selenium import webdriver
from pyquery import PyQuery as pe
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
__jbox_cookies = {}
label_number = {'base_info': 0, 'edu_back': 1, 'job_exp': 2, 'self_comment': 3, 'school_exp': 4, 'honour': 5,
           'other': 6, 'sci_exp': 7,'skill': 8,'item_exp':9}

number2label = ['base_info', 'edu_back', 'job_exp', 'self_comment', 'school_exp', 'honour',
           'other', 'sci_exp','skill','item_exp','useless']
__header = {
'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'}
# 基本信息构造----------------------------------------------------------------------------
province = [u'江西',u'广东',u'北京',u'黑龙江',u'浙江',u'               宁夏',u'江苏',u'新疆',u'湖北',u'湖南',u'安徽',u'广西',u'香港',\
u'福建',u'台湾',u'海南',u'西藏',u'天津',u'河北',u'四川',u'辽宁',u'内蒙古',u'吉林',u'甘肃','']
# 24省
title_province = [u'家乡',u'籍贯',u'故乡',u'所在地',u'居住地',u'住址']  # 6
nation = [u'汉族',u'维吾尔族',u'汉族',u'汉族',u'汉族',u'汉族',u'汉族',u'汉族',u'回族',u'维吾尔族','']
# 10族
title_nation = [u'民族',u'所属民族' ] # 2
zhengzhimianmao = [u'群众',u'共青团员',u'中共党员','']  # 3
email = ['@gmail.com','@123.com','@qq.com','@nuaa.com','@126.com','@163.com','@yahoo.cn','@sina.com','@shouhu.com']
phone_prex = ['','', '', '', '', '', '', '', '', '+86','+86', '+86', '+86', '+86', '+86', '+86','+852','+853','+886','+82','+81']
phone = {
    '0':[1],
    '1':[1,2,3,4,5,6,7,8,9],
    '2':[1,2,3,4,5,6,7,8,9,9,9,9,9,0],
    '3':[1,2,3,3,3,4,5,6,7,7,7,7,7,8,8,8,9,9,9,0],
    '4':[1,2,3,4,5,6,7,8,8,8,9,9,9,9,9,9,0],
    '5':[1,2,3,4,5,6,7,8,9,0],
    '6':[1,2,3,4,5,6,7,8,9,0],
    '7':[1,2,3,4,5,6,7,8,9,0],
    '8':[1,2,3,4,5,6,7,8,9,0],
    '9':[1,2,3,4,5,6,7,8,9,0],
    '10':[1,2,3,4,5,6,7,8,9,0]

}
age = 26  # 19-50
school_list = ['']  # 学校列表
sex = [u'男', u'女','']
final_school = ''
# 教育背景构造----------------------------------------------------------------------------
title_major = ['专业:','所在专业:','所学专业:','专业名称:']
title_grade = ['学历:','学历水平:','教育水平:']
major_list = ['计算机','计算机科学与技术','计算机技术','电子科学与技术','软件工程','信息工程','网络与新媒体','数字媒体技术','网络安全通信','通信工程',\
         '信息技术与安全','计算机应用','数学类','数学与应用数学','信息与计算科学','数理基础科学','机械工程','机械自动化',
         '物理学','语文','工商管理','UI设计','经济学','材料环境工程','化学','英语','日语','生物医学','生物计算机应用科学'
         ,'医疗','医学图像','微电子','物联网工程','历史','马克思主义理论研究' ,'政治经济学','考古学','古生物学','地理','土木工程','艺术','管理','经济','制药工程','食品工程','电子商务','电商管理'
         ,'园林艺术','林业管理','农业栽培','农作物管理','农业','航空航天','飞行器制造','测控与自动化','运维','数据分析','数据挖掘','计算机视觉'
         ,'图像处理','大数据','人工智能','车辆工程','能源利用管理','电子技术','核物理','核能管理']
grade_list = ['本科生','本科','研究生','硕士','高中生','高中','大专生','大专','博士生','博士','初中生','初中','小学生','小学']
# 荣誉证书构造----------------------------------------------------------------------------
certificate_list = ['大学英语六级','大学英语四级','CET-4','CET-6','计算机二级','初级软件开发工程师','中级软件开发工程师','高级软件开发工程师'
               ,'教师资格证','律师资格证','大学一等奖学金','国家级奖学金','大学二等奖学金','大学三等奖学金','IT培训结业证书','优秀大学生','优秀研究生'
                    ,'ACM亚洲金奖','ACM亚洲区银奖','ACM亚洲区铜奖','ACM世界金奖','ACM世界银奖','ACM世界铜奖','软件杯特等奖','软件杯一等奖'
                    ,'软件杯二等奖','软件杯三等奖','互联网+竞赛全国一等奖','互联网+竞赛全国二等奖','互联网+竞赛全国三等奖','互联网+竞赛省一等奖','互联网+竞赛省二等奖','互联网+竞赛省三等奖'
                    ,'互联网+竞赛校一等奖','互联网+竞赛校二等奖','互联网+竞赛校三等奖','互联网+竞赛优秀奖','大学生外包服务大赛全国一等奖','大学生外包服务大赛全国二等奖','中国大学生外包服务大赛全国三等奖','Kaggle天池赛第一名','Kaggle天池赛第二名','Kaggle天池赛第三名','人工智能竞赛第一名','人工智能竞赛第二名'
                    ,'人工智能竞赛第三名','大学生服务外包竞赛校赛一等奖','大学生服务外包竞赛校赛二等奖','大学生服务外包竞赛校赛三等奖']
# 实习经历构造----------------------------------------------------------------------------
place = {'百度':95,'阿里巴巴':95,'腾讯':95,'网易':95,'大华':85,'海康':85,'今日头条':90,'字节跳动':90,'支付宝':90,'华为':90,'之江实验室':85,'中国电信':90,'中国移动':90,'中国民生银行':90
         ,'中国工商银行':90,'中国银行':90,'中国农业银行':90,'中国交通银行':90,'搜狐':90,'新浪':90,'工业富联':90,'三六零':90,'中兴通讯':90,'用友网络':90,'国电南瑞':80
         ,'科大讯飞':80,'紫光股份':80,'恒生电子':80,'联想集团':80,'深信服':80,'万国数据':80,'中国民航信息网':80,'饿了么':90,'谷歌':100,'微软':100
         ,'facebook':100,'爱奇艺':80,'百度糯米':80,'中通':80,'佰米智能':80,'小米':80,'圆通':80,'哔哩哔哩':80,'战旗':80,'阿里云':90
         ,'中科院有限公司':95,'研究所有限公司':80,'':0,'达内培训有限公司':60,'阿里':100,'百度有限责任公司':95,'阿里巴巴有限责任公司':95,'腾讯有限责任公司':95,'网易有限责任公司':95,'大华有限责任公司':85,'海康有限责任公司':85,'今日头条有限责任公司':90,'字节跳动有限责任公司':90,'支付宝有限责任公司':90,'华为有限责任公司':90,'之江实验室有限责任公司':85,'中国电信集团':90,'中国移动集团':90,'中国民生银行集团':90
         ,'中国工商银行有限公司':90,'中国银行有限公司':90,'中国农业银行有限公司':90,'中国交通银行有限公司':90,'搜狐有限公司':90,'新浪有限公司':90,'工业富联有限公司':90,'三六零有限公司':90,'中兴通讯有限公司':90,'用友网络有限公司':90,'国电南瑞集团':80
         ,'科大讯飞集团':80,'紫光股份集团':80,'恒生电子集团':80,'联想集团集团':80,'深信服集团':80,'万国数据集团':80,'中国民航信息网集团':80,'饿了么集团':90,'谷歌集团':100,'微软集团':100
         ,'facebook集团':100,'爱奇艺集团':80,'百度糯米集团':80,'中通集团':80,'佰米智能集团':80,'小米有限公司':80,'圆通集团':80,'哔哩哔哩集团':80,'战旗集团':80,'阿里云集团':90
         ,'中科院集团':95,'研究所集团':80,'达内培训集团':60,'阿里集团':100,'杭州研究所':60,'江苏研究所':100}
title_job = ['担任职位：','职位：','任职：', '职位名称：', '岗位名称：','','','']
title_place = ['工作单位：','工作部门：','部门单位：','企业单位：','企业名称:','企业部门','工作单位名称','企业名字：','企业单位名称']
title_job_describe = ['职责描述：', '职位描述：', '工作内容：', '工作职位简述：','职位简述：','工作内容概括:','职位描述:', '职责描述:','岗位职责：']
job = ['算法工程师','JAVA开发工程师','PHP开发工程师','数据挖掘开发工程师','运维管理','客服','前台销售','超市员工','Android工程师','安卓软件测试实训岗','安全架构师'
       ,'Android实习生','白盒测试储备岗','播放器工程师','储蓄店长','采购跟单','策划撰稿','产品经理','电话营销','Delphi工程师','ERP销售顾问','ERP软件开发助理','会计','iOS开发工程师'
       '技术维护人员','java研发工程师','计算机软件测试储备岗','客服专员','美工','平面设计','Python架构师','嵌入式linux系统工程师','汽车车载软件技术储备岗','全栈工程师','软件数据分析员实训岗'
       ,'人工智能软件测试实训岗','软件销售','人事行政助理','数据产品专家','售前邀约客服','市场维护专员','实施顾问','手机APP开发工程师','市场推广总经理','市场推广副总经理','投标专员','天猫淘宝运营','Web后端工程师'
       'Web前端工程师','网络工程师','销售代表','运营总监','药企销售','英语翻译官','硬件工程师','网络推广SEO/ASO','营销策划'
       ,'初高中各科老师', '初高中各科老师', '财务经理', '财务经理', '电话销售', '电话销售', '粉笔公考教研实习生', '粉笔公考教研实习生', '分析师', '分析师', '高考志愿填报咨询师', '规划师', '高考志愿填报咨询师',
       '寒假兼职科学老师', '寒假兼职科学老师', '计算机类考研辅导', '计算机类考研辅导', '教务主任', '教务主任', '教务专员', '教务专员',
       '考研数学辅导老师', '考研数学辅导老师', '课程顾问', '课程顾问', '客户经理', '客户经理', '课程顾问',
       '课程顾问', '南山科苑', '派发传单', '派发传单', '情感咨询师', '情感咨询师', '人力资源专员', '人力资源专员', '沈阳公考笔试线上小班老师', '线上教学需坐班', '沈阳公考笔试线上小班', '升学考试', '考研', '辅导老师', '升学考试', '考研', '辅导', '市场专员', '市场专员', '市场专员', '市场专员', '市场推广', '教育方向', '市场推广', '教育方向', '市场经理', '市场经理', '推广',
       '推广', '特教老师', '特教老师', '网络销售', '网络销售', '网络营销', '网络营销', '心理学考研辅导', '心理学考研辅导', '销售代表', '销售代表', '销售专员', '销售专员', '销售专员', '销售专员', '小学教师助教', '小学教师助教', '小学教学部经理', '小学教学部经理', '销售', '销售', '销售代表', '销售代表', '英语辅导老师', '英语辅导老师', '语文老师', '语文老师', '幼儿老师', '偏科学课方向',
       '幼儿老师', '偏科学课', '幼儿老师', '幼儿老师', '招生老师', '招生老师', '咨询师助理', '咨询师助理', '招生顾问', '招生顾问', '招生咨询经理', '项目负责人', '招生咨询经理', '项目负责人','采购开发工程师', '采购开发工程师', '测试工程师', '测试工程师', '仓库理货员', '仓库理货员', '采购助理', '采购助理', '储备会计', '储备会计', '电子工程师', '电子工程师', '电子技术员', '电子技术员', '电子工程师',
       '电子工程师', '电子数据鉴定技术人员', '电子数据鉴定技术人员', '电子工程师', '电子工程师', '电路板维修员', '电路板维修员', '电子工程师', '电子工程师', '优化师', '优化师', '现场应用工程', '现场应用工程', '岗前游戏动画师', '岗前游戏动画师', '高级结构工程师', '高级结构工程师', '高级结构工程师', '高级结构工程师', '高级电子工程师', '高级电子工程师', '工艺工程师', '工艺工程师', '海外业务', '海外业务',
       '化妆品网络销售专员', '化妆品网络销售专员', '会计实习生', '会计实习生', '版图设计工程师', '版图设计工程师', '客服', '客服', '模拟电路设计工程师', '模拟电路设计工程师', '工程师',
       '工程师', '普工', '普工', '文员', '文员', '程师', '程师', '工程师', '工程师', '嵌入式软件开发工程师', '嵌入式软件开发工程师', '嵌入式软件开发工程师', '嵌入式软件开发工程师',
       '技术员', '技术员', '人事高级专员', '人事高级专员', '人力行政兼前台', '人力行政兼前台', '线长', '线长', '市场专员', '市场专员', '社交推广专员', '社交推广专员', '市场推广专员', '市场推广专员', '数字', '设计工程师', '数字', '设计工程师', '运营', '运营', '淘宝客服', '淘宝客服', '物控员', '物控员', '网络店铺运营', '网络店铺运营', '网络在线', '淘宝客服', '网络在线', '淘宝客服', '新媒体专员', '新媒体专员',
       '销售代表', '电子元器件', '项目工程师', '项目工程师', '销售经理', '销售经理', '游戏动画师', '游戏动画师', '营销推广', '营销推广', '硬件开发工程师', '硬件开发工程师', '亚马逊运营', '亚马逊运营', '硬件工程师', '硬件工程师', '业务员', '业务代表', '业务员', '业务代表', '招商专员', '招商专员', '质量工程师', '质量工程师', '主办会计', '主办会计','办公室主任', '办公室主任', '成岛洛宾弗国际投资集团控股后勤食堂总经理',
       '成岛洛宾弗国际投资集', '产线班组长', '产线班组长', '电信工程设计和施工商务市场营销员', '电信工程设计和施工商', '电子工程师', '电子工程师', '高薪', '急招', '天线工程师', '高薪', '急招', '天线工程师', '工程研究院通讯计算机系专家', '工程研究院通讯计算机', '高级嵌入式工程师', '高级嵌入式工程师', '航空测量', '基带工程师', '基带工程师', '建设工程部工地保卫人员', '建设工程部工地保卫人员', '结构工程师', '结构工程师',
       '科技园物联网设计人员',  '通信技术支持工程师', '号事业部人员', '号事业部人员', '文秘', '文秘', '系统研发工程师', '遥感', '测绘', '地理信息', '系统研发工程师', '智慧机器人研究员','安环部长', '安环部长', '安全员', '安全员', '安全主管', '安全主管', '安环主管', '安环主管', '安全主任', '安装工程师', '安全评价师',  '安全员', '安全管理', '安全工程师', '安全工程师', '安全管理员', '安全员', '安全环保专员', '安全工程师', '安全管理员', '安全管理员', '安全经理', '办公室内勤', '办公室内勤', '建模制图员', '苯乙烯销售业务经理', '保险管理经理', '标准室标准化管理员', '办公室文员', '部长', '部长', '包装机工程师', '包装机工程师', '焙烧主任', '工程师', '氧化铝', '焙烧主任', '工程师', '氧', '班长', '班长', '博士后', '博士后', '包装工', '包装工', '班长', '班长', '包装作业员', '包装作业员', '包装车间外操', '包装车间外操', '标物工程师', '标物工程师', '白炭黑开发工程师', '白炭黑开发工程师', '操作工', '操作工', '财务主管', '经理', '财务主管', '经理', '采购助理', '采购助理', '操作工', '操作工', '储运操作工', '储运操作工', '采购工程师', '采购工程师', '充装工', '充装工', '储运设计', '储运设计', '储备干部', '管培生', '储备干部', '管培生', '采购工程师', '采购工程师', '采购主管', '经理', '采购主管', '经理', '操作工', '操作工', '仓库管理员', '仓库管理员', '财务', '财务', '储运工程师', '储运工程师', '采购助理', '采购助理', '电工焊工电仪工', '电工焊工电仪工', '电工', '电工', '电气设计师', '电气设计师', '电仪工程师', '电仪工程师', '电气设计人员', '电气设计人员', '大区销售经理', '大区销售经理', '电器工程师', '电器工程师', '电气工程师', '电气工程师', '电仪工程师', '急', '电仪工程师', '急', '电气电信设计', '电气电信设计', '档案管理专员', '档案管理专员', '动设备班长', '动设备班长', '电气设计工程师', '电气设计工程师', '大客户销售经理', '大客户销售经理', '大区经理', '大区经理', '动设备工程师', '动设备工程师', '大客户经理', '大客户经理', '电仪工程师', '电仪工程师', '专员', '经理', '工程师', '物料编码工程师',  '俄语翻译', '巡检员', '巡检员', '工程师', '工程师', '主管', '主管', '工程师', '工程师', '安全员', '安全员', '工程师', '工程师', '项目管理', '项目管理', '系统运维工程师', '系统运维工程师', '二甲苯操作工', '二甲苯操作工', '采购工程师', '采购工程师', '主管', '安徽铜陵', '主管', '安徽铜陵', '分析工程师', '分析工程师', '法务人员', '法务人员', '分析', '统计', '分析', '统计', '分析技术员', '分析技术员', '分析主管', '工程师', '分析主管', '工程师', '费控经理', '费控经理', '费用控制工程师', '费用控制工程师', '阀门研发设计', '阀门研发设计', '分析检测', '分析检测', '焚烧工艺专家', '焚烧工艺专家', '防腐保温工程师', '防腐保温工程师', '费控工程师', '现场', '费控工程师', '现场', '法务主管', '法务主管', '防腐工程师', '防腐工程师', '废气处理工程师', '废气处理工程师', '非标设备设计', '非标设备设计', '方案工程师', '方案工程师', '废气工程师', '废气工程师', '高薪诚聘兰炭厂厂长', '高薪诚聘兰炭厂厂长', '工艺工程师', '工艺工程师', '工业会计', '工业会计', '工艺管道设计师', '工艺管道设计师', '工艺管道设计人员', '工艺管道设计人员', '高级研发工程师', '高级研发工程师', '给排水工程师', '给排水工程师', '工程部副部长', '工程部副部长', '概预算', '概预算', '工厂厂长', '工厂厂长', '工艺工程师', '工艺工程师', '工艺员', '工艺员', '工艺设计总工程师', '工艺设计总工程师', '工业给排水', '工业给排水', '高级研发工程师', '高级研发工程师', '工程部部长', '工程部部长', '高级技术工程师', '高级技术工程师', '罐车司机', '押运', '罐车司机', '押运', '化验', '检验', '化验', '检验', '化工生产操作工', '化工生产操作工', '化工贸易', '化工贸易', '化工工艺工程师', '化工工艺工程师', '焊接质检员', '技术员', '工程师', '焊接质检员', '技术员', '工', '化工工程师主管', '化工工程师主管', '化工专业人员', '化工专业人员', '海螺新材料技术中心负责人', '海螺新材料技术中心负', '化工操作', '化工操作', '化工产品装卸工', '化工产品装卸工', '化工技术员', '岁以下', '化工技术员', '岁以下', '环保项目经理', '环保项目经理', '焊接工程师', '焊接工程师', '化验员', '化验员', '化学分析工程师', '化学分析工程师', '化工工艺设计工程师', '化工工艺设计工程师', '化工设备员', '化工设备员', '红外产品经理', '红外产品经理', '工程师', '工程师', '体系工程师', '体系工程师', '工程师', '工程师', '工程师', '工程师', '工程师', '工程师', '管理员', '管理员', '工程师', '工程师', '管理员', '管理员', '主管', '主管', '系统工程师', '系统工程师', '技术员', '技术员', '电仪技术员', '电仪技术员', '工艺工程师', '工艺工程师', '运维工程师', '运维工程师', '仪表工程师', '专员', '华泓', '专员', '华泓', '检修部长', '检修部长', '机械技术员', '机械技术员', '建筑涂料应用工程师', '建筑涂料应用工程师', '建筑工程师', '建筑工程师', '技术工人', '技术工人', '技术服务工程师', '技术服务工程师', '结构工程师', '结构工程师', '机电工程师', '机电工程师', '技术支持工程师', '技术支持工程师', '机电仪工程师', '机电仪工程师', '结构设计', '结构设计', '技术研发员', '技术研发员', '技术研发工程师', '技术研发工程师', '建筑设计工程师', '建筑设计工程师', '技术工程师', '技术工程师', '检验', '检验', '计划工程师', '计划工程师', '建筑设计工程师', '建筑设计工程师', '科研助理', '科研助理', '控制经理', '控制经理', '空分空压工程师', '现场', '空分空压工程师', '现场', '客服专员', '销售内勤', '客服专员', '销售内勤', '空分工程师', '空分工程师', '科技文员', '科技文员', '开机售后工程师', '开机售后工程师', '控制系统工程师', '高级', '工程师', '项目经理', '控制系统工程师', '高级', '控制副经理', '工程师', '控制副经理', '工程师', '库管', '库管', '可行性研究报告', '安全设施设计专篇编制人员', '可行性研究报告', '安全', '开单员', '开单员', '库区班长', '库区班长', '控制经理', '控制经理', '空调工', '空调工', '客服主管', '经理', '客服主管', '经理', '空分外操', '空分外操', '空分班长', '空分班长', '工厂电气工', '工厂电气工', '流动砂浆技术经理', '流动砂浆技术经理', '炼化工艺工程师', '炼化工艺工程师', '炼油工程师', '现场', '炼油工程师', '现场', '炼化工艺工程师', '炼化工艺工程师', '硫酸回收车间主任', '硫酸回收车间主任', '安全生产副总', '安全生产副总', '裂解装置副经理', '裂解装置副经理', '再液化副操', '再液化副操', '联合石化', '管理部安全副主任工程师', '联合石化', '管理部安', '硫酸分厂操作工', '硫酸分厂操作工', '硫铵高级业务经理', '硫铵高级业务经理', '理化检验员', '理化检验员', '垃圾吊操作员', '垃圾吊操作员', '硫磺班长', '硫磺班长', '临床监察员', '临床监察员', '炼油装置操作工人', '待遇优厚', '炼油装置操作工人', '待', '模块制造质检和储备干部', '模块制造质检和储备干部', '码头工程师', '菲律宾', '码头工程师', '菲律宾', '铆工', '铆工', '贸易海运部副经理', '贸易海运部副经理', '煤制气班长', '主操', '外操', '煤制气班长', '主操', '外操', '铆工', '铆工', '茂名项目负责人', '茂名项目负责人', '码头长', '码头长', '贸易专员', '贸易专员', '码头装卸主操', '福清江阴', '码头装卸主操', '福清江', '码头操作员', '码头操作员', '铆工', '铆工', '木器漆开发技术工程师', '木器漆开发技术工程师', '贸易专员', '原料采购', '贸易专员', '原料采购', '门卫', '门卫', '铆工', '铆工', '系统工程师', '应用系统', '系统工程师', '应用', '煤制氢气化车间操作工', '煤制氢气化车间操作工', '暖通工程师', '暖通工程师', '南京华工农化研究院化学分析工程师', '南京华工农化研究院化', '暖通设计', '暖通设计', '暖通工程师', '暖通工程师', '暖通设计工程师', '暖通设计工程师', '暖通工程师', '现场', '暖通工程师', '现场', '暖通空调设计师', '暖通空调设计师', '能源管理工程师', '能源管理工程师', '暖通设计', '暖通设计', '暖通工程师', '暖通工程师', '暖通工程师', '暖通工程师', '能源化工事业部高级经理', '能源化工事业部高级经理', '暖通工程师', '暖通工程师', '暖通设计工程师', '暖通设计工程师', '尿素操作工', '尿素操作工', '暖通工程师', '暖通工程师', '暖通工程师', '暖通工程师', '暖通工程师', '暖通工程师', '实验员', '实验员', '烯烃转化', '含', '操作', '烯烃转化', '含', '工程师', '工', '采购经理', '采购经理', '水煤浆运营总监', '烯烃分离操作工岗位', '烯烃分离操作工岗位', '欧美合资孚宝港务', '欧美合资孚宝港务', '配煤工', '配煤工', '品管检验员', '品管检验员', '普工', '普工', '品质管理', '品质管理', '配管设计', '配管设计', '瓶管', '瓶管', '配气员', '配气员', '配管工程师', '配管工程师', '配管材料工程师', '配管材料工程师', '配管工程师', '配管工程师', '配管设计', '配管设计', '计划控制工程师', '计划控制工程师', '工程师', '工程师', '品控部副部长', '品控部副部长', '品管分析员', '品管分析员', '品保工程师', '品保工程师', '培训经理', '培训经理', '配管工程师', '配管工程师', '气瓶充装班长', '气瓶充装班长', '区域销售经理', '出差', '区域销售经理', '出差', '区域销售经理', '区域销售经理', '区域销售代表', '区域销售代表', '氢燃料电池调研员', '氢燃料电池调研员', '汽机操作工', '汽机操作工', '区域销售经理', '区域销售经理', '企划专员', '企划专员', '主管', '主管', '体系审核', '体系审核', '汽机化水设备主任', '工程师', '汽机化水设备主任', '工程师', '汽机主值', '汽机主值', '钳工', '管铆工', '电工', '钳工', '管铆工', '电工', '区域销售经理', '大客户经理', '区域销售经理', '大客户', '工程师', '工程师', '区域经理', '区域经理', '容器制造', '焊接', '容器制造', '焊接', '人事专员', '人事专员', '润滑油', '脂', '生产工程师', '润滑油', '脂', '生产工程师', '热工工程师', '热工工程师', '乳液聚合研发工程师', '丁腈手套', '乳液聚合研发工程师', '人力资源', '人力资源', '热控仪表主任工程师', '菲律宾', '热控仪表主任工程师', '人力资源专员', '人力资源专员', '热力', '电气', '专业工程师', '热力', '电气', '专业工程师', '热能工程师', '热能工程师', '热工设计', '热工设计', '热电运行岗', '热电运行岗', '人事专员', '人事专员', '人力资源部经理', '人力资源部经理', '热能与动力工程', '热能与动力工程', '人事', '企管', '人事', '企管', '热爱销售的应届生', '热爱销售的应届生', '人资部长', '人资部长', '生产计划员', '生产计划员', '生产管理', '生产管理', '设备工程师', '设备工程师', '设备维修工', '设备维修工', '设备制造技术员', '工程师', '设备制造技术员', '工程师', '生产操作工', '生产操作工', '实验分析员', '实验分析员', '设备工程师', '设备工程师', '设备动力部经理', '设备动力部经理', '设备管理员', '岁以下', '设备管理员', '岁以下', '水处理工程师', '水处理工程师', '设备工程师', '动', '设备工程师', '动', '设备设计', '设备设计', '生产主管', '生产主管', '设备工程师', '设备主管', '设备工程师', '设备主管', '设备工程师', '设备工程师', '生产操作工', '工作地点', '全椒', '生产操作工', '工作地点', '设备部长', '设备部长', '涂料', '乳液', '销售经理', '涂料', '乳液', '销售经理', '体系专员', '体系专员', '土建工程师', '土建工程师', '土建工程师', '土建工程师', '土建工程师', '土建工程师', '铜山事业部储备经理', '铜山事业部储备经理', '土建施工经理', '土建施工经理', '涂料助剂销售工程师', '涂料助剂销售工程师', '土建工程师', '土建工程师', '土建造价师', '南昌', '土建造价师', '南昌', '土建结构工程师', '土建结构工程师', '推进剂技术服务助理', '推进剂技术服务助理', '土建工程师', '土建工程师', '土建工程师', '现场', '土建工程师', '现场', '土建工程师', '土建工程师', '土建工程师', '土建工程师', '土建造价工程师', '菲律宾', '土建造价工程师', '菲律', '投资高级经理', '投资高级经理', '木器应用工程师', '木器应用工程师', '树脂合成工程师', '树脂合成工程师', '设施工程师', '电气或机械工程', '研发工程师', '研发工程师', '高级技术员', '高级技术员', '废气工艺工程师', '废气工艺工程师', '销售', '销售', '胶乳装置经理', '副经理', '工程师', '胶乳装置经理', '副经', '废气销售工程师', '废气销售工程师', '项目生产负责人', '项目生产负责人', '污水工艺工程师', '污水工艺工程师', '文本工程师', '文本工程师', '外贸营销人员', '外贸营销人员', '危货品司机', '危货品司机', '外贸', '销售', '外贸', '销售', '无人机作业主管', '无人机作业主管', '外贸专员', '外贸专员', '文控工程师', '文控工程师', '文控工程师', '文控工程师', '文控工程师', '文控工程师', '文档控制经理', '文档控制经理', '文档控制工程师', '现场', '文档控制工程师', '现场', '无损检测工程师', '无损检测工程师', '无损检测监理工程师', '无损检测监理工程师', '物业部电工', '物业部电工', '外协管理工程师', '外协管理工程师', '文控', '文控', '无损检测监理工程师', '无损检测监理工程师', '现场技术服务工程师', '现场技术服务工程师', '销售工程师', '销售工程师', '行政专员', '行政专员', '销售代表', '销售代表', '销售工程师', '销售工程师', '消防员', '消防员', '销售员', '销售员', '销售代表', '广州', '销售代表', '广州', '项目研发经理', '项目研发经理', '销售工程师', '销售工程师', '销售工程师', '销售工程师', '销售经理', '销售经理', '项目经理', '项目经理', '销售代表', '销售代表', '销售人员', '销售人员', '销售代表', '聚氨酯', '销售代表', '聚氨酯', '销售', '销售', '相机开发工程师', '结构方向', '相机开发工程师', '结构', '运行部长', '运行部长', '应付会计', '应付会计', '仪表工程师', '仪表工程师', '研发工程师', '研发工程师', '研发工程师', '研发工程师', '研发工程师', '研发工程师', '研发', '储备干部', '研发', '储备干部', '业务经理', '业务经理', '运行班长', '运行班长', '压力容器设计工程师', '压力容器设计工程师', '仪表设计', '仪表设计', '研发工程师', '北京', '研发工程师', '北京', '押运员', '押运员', '研发工程师', '研发工程师', '仪表班长', '仪表班长', '研发工程师', '研发工程师', '研发经理', '研发经理', '应用专家', '应用专家', '中控室工作人员', '中控室工作人员', '职业安全健康专员', '职业安全健康专员', '质量检验员', '质量检验员', '质检员', '质检员', '总图设计师', '总图设计师', '总经办文秘', '总经办文秘', '中控操作员', '中控操作员', '自控', '仪表', '设计人员', '自控', '仪表', '设计人员', '质量管理人员', '质量管理人员', '制冷工程师', '制冷工程师', '制氢站站长', '制氢站站长', '质检员', '质检员', '质量体系工程师', '驻站操作员', '驻站操作员', '质检管理人员', '质检管理人员', '质量工程师', '质量工程师', '质量工程师', '质量工程师', '专职安全员', '专职安全员']
job_describe = ['主要负责公司运维，数据分析入库处理，深度挖掘潜在客户', '负责自然语言处理算法研究，改进公司框架结构，提高运行效率','1.负责公司旗下品类产品的内外包装设计(婴童、美妆、快消为主); 2、根据产品的特性进行产品包装创意和结构设计; 3、复核和调整产品包装视觉外观;',
                '独立完成影视作品的包装设计','负责包装设 计和设 计 评估能力的建设;2.负责集团新包装的设 计 工作,完成新品开发任务;3.提供包装技术输入,以帮助概念设 计 向合理和优化的方向转变;4.管理包装 设 计团队,培养包装 设 计人才;',
                '负责仓库整体工作事务及日常工作管理,确保收货、包装、发货等流程正常进行; 2. 执行和完善仓库、包装的规章制度、规范作业标准及流程,提高效率,降低成本; 3. 制定每月工作计划,总结和分析上月部门工作情况,带领督促员工完成目标任务; 4.监督、管理仓库收发区作业情况、6S的推行状况',
                '图书编辑的主要工作就是进行图书编辑和平面设计,其岗位职责如下: 1.完成公司交给的日常工作,图书编辑以及平面设计的各类要求; 2.负责公司图书校对和排版,完成各类书籍资料所需的整理与编辑工作; 3.协助其他部门人员,完成设计及制作; 4.如需为其他合作单位工作,则需做好沟通协调工',''
                                                                                                                                                               '1、负责公司产品及相关附件的设计;2、负责公司新产品包装的开发、设计、制作包装','1、销量计划管理 参与制定食用油品类产品在区域内的销售计划,并将销售计划分解到销售区域;跟进销售进度,指导和监督销售区域完成各项销售任务。',
                '品牌管理 参与制定食用油品类产品在区域内的品牌发展规划,指导和协助销售区域进行品牌管理,监督执行,保证销售目标的实现。','负责起草公司领导的演讲稿,工作报告、工作汇报、工作计划等;','负责有关政府方面报告、公文、函件、材料等撰写;'
                ,'配合经理完成阿里国际站上产品的推广计划。3.定期参加阿里巴巴培训。4.完成其他B2B平台和社区的推广任务','1、主持客户服务中心各项每日工作流程梳理管理; ',
                '2、完成客户电话需求接应操作及对客基本服务操作流程梳理管理; 3、完成各类日常投诉处理并按规定做好记录,定期汇总上报; 4、完成每日对客','负责国际头条自媒体产品的规划和设计,包括但不限于频道展现、评论、话题订阅和内容互动体系等,促进生态发展;• 持续挖掘新的内容互动模式,提升用户活跃度和留存率;• 对产品相关数据指标进行统计分析,从而提出改进建议,持续完善产品',''
                '1、完成移动端、WEB端界面设计,熟悉手机端html5页面开发,开发和调试工作','负责阿里巴巴国际站账号日常运营维护与推广工作,提升关键词排名与产品转化效果;','执行推广方案,产品线的规划,包括产品的上下架的营销方式','常规工作包括:整理优化产品关键词,阿里巴巴产品发',
                '负责海外电子商务市场宏观趋势的跟踪与分析,结合实际业务输出对应决策的参考依据。2.对于海外媒体与淘宝联盟的合作,制定并落实全套解决方','1.根据销售目标制定销售/市场开发计划,营销方案; 2.全盘阿里巴巴/1688诚信通日常操作; 3.产品上下架,产品信息更新优化; 4.爆款打造,阿里巴巴站内推广(直通车,平台活动等)',
                '处理亿级用户行为特征， 参与特征工程，利用机器学习实现用户精准营销，负责项目的算法构建和测试效果分析，目前该项目盈利1百万以上',
                '为企业二三级等级保护信息系统做等级保护测评。主要包括对信息系统的网络结构、安全设备、信息系统的安全配置例如审计、身份验证、访问控制、数据安全等配置信息进行检查，来分析信息系统是否满足相应的等级保护等级。主要参与第二级和第三级等级保护信息系统的测评实施工作，同时负责信息系统等级保护测评计划书的撰写以及测评报告的撰写；',
                '为企业未来几年的信息安全发展做安全规划。主要包括了解企业的信息安全现状，通过分析企业信息系统的安全弱点及漏洞，并结合互联网的发展态势，给出企业未来几年信息安全的规划方案。负责项目实施计划、实施方案的撰写、信息安全实地调研工作、信息安全规划方案的撰写',
'在Hive平台sql实现数据的处理和提取，采用TF-IDF、word2vec等构建特征并采用XGBoost、GBDT等算法实现分类和预测，并采用KS指标进行模型综合评价；结合TGI指数构建TGI评分卡模型；结合业务特点实现基于内存的协同过滤、ALS、基于深度学习的协同过滤等推荐算法',
'对分类、预测、特征提取等机器学习算法以及推荐算法、数据挖掘有了更深层次的了解，强化了Python、SQL、PySpark技能，并对Hadoop、Spark框架有一定的了解 ',
                '帮助老师处理学院的学生事务；',
'参与软件工程硕士学位点（专硕）的评估工作，负责收集资料、整理资料、学位点评估报告的撰写以及将相关资料上传至学位点评估网站；',
'帮助学工办老师一起完成本年级学生毕业资料的收集、整理；',
'帮助老师一起管理低年级学生，督促学生完成自身的学习。',
'帮助老师一起管理低年级学生，督促学生完成自身的学习。',
                '1、国网浙江省电力公司运营监测中心建设二期：负责省公司ERP系统BW/BO模块开发、系统测试，包括数据接入，数据建模，BO\
报表开发等工作以及省公司数据库指标数据接入，建表，数据问题排查及系统测试和相关文档整理。',
                '1、主导开发数据盒子产品，主要功能：三方数据爬虫，数据整合分析及展现，为前端系统提供数据支撑',
'2、协助国内某知名互联网行业巨头投资某国内知名互联网汽修平台，帮助客户对用户行为、门店行为和平台行为进行多维度交叉\
分析，识别高风险用户对交易数据的潜在影响。',
'3、协助某全球著名私募基金投资一家中国英语在线教育平台，帮助客户识别高风险交易和用户、验证业务数据准确性和数据以及\
知识产权运维评估。',
'4、协助某全球著名私募基金投资一家中国社区生鲜团购平台，帮助客户验证收入准确性，识别高风险用户。',
'5、协助某全球著名私募基金投资一家中国著名旅游平台，帮助客户验证高风险交易和用户，识别虚假交易和刷单行为。',
'6、协助某国内知名私募基金投资一家宠物商品销售公司，帮助客户验证该公司电商平台的运营合规和销售数据真实性，识别虚假\
交易和刷单行为。',
                '培养了阅读英文文献的能力以及提升了关于方差分析、相关分析、广义线性模型等统计知识的运用',
                '2）主要工作内容：负责4G网络优化算法业务测试交付工作。深入了解4G小区邻区添加算法、小区失效告警算法，参与新功能系统设计评审、测试方案制定、case设计(利于等价类划分站型、业务场景、性能瓶颈分析、异常构造)、拉通周边产品同事协调测试，发现问题推到开发解决，并输出测试报告。保证产品质量，交付客户。',
                '系统介绍：基站网络管理系统M2000，主要负责管理2g、3g和4g基站网元。该系统主要提供基站的配置管理、告警管理、性能管理、告警管理、软件管理、网络优化等功能',
                '负责提升网站整体流量和知名度; 2、策划、执行在线推广,运用多种网络推广手段来提高公司品牌的知名度; 3、负责公司网站的推广,在各大论坛,博客,书签,目录网站做外链;'
                ,'在部门经理领导下,协助维护与金融机构的关系,并做好贷前贷后相关工作','配合部门各岗位人员完成各项工作任务。','做好融资档案资料的收集、整理、归档工作','负责收集、整理、分析与本部门职责相关的业务信息并及时上']
time = ['实习','工作']
def compute_shixi_work(month):
    if month >=24:
        return [1,1]
    elif month >=18:
        return [0.92,1]
    elif month >=12:
        return [0.85,1]
    elif month >=6:
        return [0.8,0.9]
    else:
        return [0.8,0.8]


time_weight1 = lambda x:min(x*0.2, 1)
# 专业技能构造----------------------------------------------------------------------------
course_list = ['数据结构','操作系统','C语言程序设计','计算机组成原理','计算机网络','面向对象程序设计','java程序设计','编译原理','python程序设计','微机原理','单片机',
               '机器学习','人工智能','大数据','数据挖掘','数字图像处理','高等数学','线性代数','软件工程','javaEE','计算机视觉','分布式计算','最优化理论','计算机统计学'
               ,'土木工程理论','机械设计','电子模拟技术基础','英语写作','政治经济学','历史','大学语文','大学物理','航天飞行理论','流体力学'
               ,'经济管理','会计管理学','金融','中国礼仪文化','现代生命科学','','高分子化学','','农业管理基础','']
course_small_weight_lsit = ['土木工程理论','机械设计','电子模拟技术基础','英语写作','政治经济学','历史','大学语文','大学物理','航天飞行理论','流体力学'
               ,'经济管理','会计管理学','金融','中国礼仪文化','现代生命科学','高分子化学','','农业管理基础']
skill_stack = ['python','opencv','c++','','java','linux','数字图像处理技术',\
'hadoop','Hadoop','excel',\
'机器学习','深度学习','神经网络','','svm','支持向量机','','sklearn','tensorflow','','pytorch','rf','随机森林','matlab','R语言',
'数据结构','算法',\
'scrapy框架','HTML','CSS','','javascript','JS','','js','lxml','XPath','','python网络请求','SQL','','NOSQL','MongoDB','Redis','分布式架构',\
'云计算','HBase','HDFS','MySQL','tableau',\
'条件随机场','CRF','crf','','word2vec','词嵌入模型','','词袋模型','隐型马可夫模型','','隐马模型','时间序列模型','HMM',\
'Attention','TF-IDF','文本相似度','RNN','LSTM','GRU','ppt','','windows','英语口语','','办公软件','会计报表',',','']
skill_small_weight_list = ['HTML','CSS','javascript','JS','js','lxml','XPath','python网络请求','excel','ppt','windows','英语口语','办公软件','会计报表','']
describe_voc = ['精通','了解','掌握','了解一定的','熟练掌握','有过一定经验的','会','熟练开发过','系统学习过',' ',' ',' ','极其熟练掌握']
describe_weight = {'精通':1, '了解':0.6,'掌握':0.8,'了解一定的':0.6,'熟练掌握':0.92,'有过一定经验的':0.7,'会':0.7,'熟练开发过':0.85,'系统学习过':0.75,' ':0.6,'极其熟练掌握':1}
# 校园经历构造----------------------------------------------------------------------------
school_exp_dic = {'学生会干部':15,'十佳歌手':10,'软件开发实验竞赛':40,'社团管理':20,'主持人':30,'团队项目合作':40}
describe_school_exp = ['在校期间曾', '本科期间曾经', '曾', '曾经', '本科期间曾', '在校期间曾经', '在校期间', '本科期间', '', '', '', '','','','','','']
school_exp_dic1 = {'学生会干部':['担任过', '有过x经历'],'十佳歌手':['被评为', '荣获', '被评选为', '参加过', '有过x经历'],'软件开发实验竞赛':['参加过', '组织过', '有过x经历'],'社团':['组织过', '参加过', '有过x经历'], '社团管理':['组织过', '有过x经历'], '主持人': ['担任过','被评选为', '有过x经历'],'团队项目合作':['进行过','有过x经历']}
# 自我评价构造----------------------------------------------------------------------------
character = ['性格开朗','稳重','有活力','待人热情','真诚','勤奋努力刻苦','热情','','','','']
character1 = ['性格内向','浮躁','没有活力','不够积极','虚伪','懒散昏沉混日子','胆小怕事','好吃懒做','','','','','','']
ability = ['很强','专业','职业道德','专业基础知识扎实','有一定的协调能力','有较强的组织能力,动手能力','能迅速的适应各种环境，并融合其中']
ability1 = ['差劲','外行，肤浅','','才疏学浅','','协调能力差','无法融入团队','','','','']
attitude = ['工作认真负责','主动承担责任','积极建立良好的工作关系','与同事，其它部门各极配合','团体协作精神']
attitude1 = ['工作消极','推脱责任','消极对待','与同事，其他部门关系不和','目光短浅，不顾团队']
experience = ['工作经验丰富','专业实践能力强','实践经历广泛','专业实践经历丰富','资历丰富','履历丰富多样','专业能力强', '', '']
experience1 = ['工作经验欠缺','基本没有实践经验','实践经验稀少','工作经验单一','缺乏实践','','']
comment_dic = {'0':character,'1':character1,'2':ability,'3':ability1,'4':attitude,'5':attitude1,'6':experience,'7':experience1}
c = {'1':[80,90,75,75,80,100,80,70,70,70,70],'2':[60,40,70,30,70,10,60,50,70,70,70,70,70,70]}
ab = {'1':[100,95,98,93,91,92,70],'2':[20,40,50,30,30,10,40,70,70,70,70]}
at = {'1':[90,90,95,95,89],'2':[10,20,10,30,40]}
ex = {'1':[100,99,100,99,98,100,70,70],'2':[10,10,7,2,6,70,70]}
dics = {'0':c,'1':ab,'2':at,'3':ex}
character_list = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D'
                  ,'E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
                  ,'0','1','2','3','4','5','6','7','8','9']


def random_name():
    # 删减部分，比较大众化姓氏
    firstName = "赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨朱秦尤许何吕施张孔曹严华金魏陶姜戚谢邹喻水云苏潘葛奚范彭郎鲁韦昌马苗凤花方俞任袁柳鲍史唐费岑薛雷贺倪汤滕殷罗毕郝邬安常乐于时傅卞齐康伍余元卜顾孟平" \
                "黄和穆萧尹姚邵湛汪祁毛禹狄米贝明臧计成戴宋茅庞熊纪舒屈项祝董粱杜阮席季麻强贾路娄危江童颜郭梅盛林刁钟徐邱骆高夏蔡田胡凌霍万柯卢莫房缪干解应宗丁宣邓郁单杭洪包诸左石崔吉" \
                "龚程邢滑裴陆荣翁荀羊甄家封芮储靳邴松井富乌焦巴弓牧隗山谷车侯伊宁仇祖武符刘景詹束龙叶幸司韶黎乔苍双闻莘劳逄姬冉宰桂牛寿通边燕冀尚农温庄晏瞿茹习鱼容向古戈终居衡步都耿满弘国文东殴沃曾关红游盖益桓公晋楚闫"
    # 百家姓全部姓氏
    # firstName = "赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨朱秦尤许何吕施张孔曹严华金魏陶姜戚谢邹喻柏水窦章云苏潘葛奚范彭郎鲁韦昌马苗凤花方俞任袁柳酆鲍史唐费廉岑薛雷贺倪汤滕殷罗毕郝邬安常乐于时傅皮卞齐康伍余元卜顾孟平" \
    #             "黄和穆萧尹姚邵湛汪祁毛禹狄米贝明臧计伏成戴谈宋茅庞熊纪舒屈项祝董粱杜阮蓝闵席季麻强贾路娄危江童颜郭梅盛林刁钟徐邱骆高夏蔡田樊胡凌霍虞万支柯昝管卢莫经房裘缪干解应宗丁宣贲邓郁单杭洪包诸左石崔吉钮" \
    #             "龚程嵇邢滑裴陆荣翁荀羊於惠甄麴家封芮羿储靳汲邴糜松井段富巫乌焦巴弓牧隗山谷车侯宓蓬全郗班仰秋仲伊宫宁仇栾暴甘钭厉戎祖武符刘景詹束龙叶幸司韶郜黎蓟薄印宿白怀蒲邰从鄂索咸籍赖卓蔺屠蒙池乔阴欎胥能苍" \
    #             "双闻莘党翟谭贡劳逄姬申扶堵冉宰郦雍舄璩桑桂濮牛寿通边扈燕冀郏浦尚农温别庄晏柴瞿阎充慕连茹习宦艾鱼容向古易慎戈廖庾终暨居衡步都耿满弘匡国文寇广禄阙东殴殳沃利蔚越夔隆师巩厍聂晁勾敖融冷訾辛阚那简饶空" \
    #             "曾毋沙乜养鞠须丰巢关蒯相查後荆红游竺权逯盖益桓公晋楚闫法汝鄢涂钦归海帅缑亢况后有琴梁丘左丘商牟佘佴伯赏南宫墨哈谯笪年爱阳佟言福百家姓终"
    # 百家姓中双姓氏
    firstName2 = "万俟司马上官欧阳夏侯诸葛闻人东方赫连皇甫尉迟公羊澹台公冶宗政濮阳淳于单于太叔申屠公孙仲孙轩辕令狐钟离宇文长孙慕容鲜于闾丘司徒司空亓官司寇仉督子颛孙端木巫马公西漆雕乐正壤驷公良拓跋夹谷宰父谷梁段干百里东郭南门呼延羊舌微生梁丘左丘东门西门南宫南宫"
    # 女孩名字
    girl = '秀娟英华慧巧美娜静淑惠珠翠雅芝玉萍红娥玲芬芳燕彩春菊兰凤洁梅琳素云莲真环雪荣爱妹霞香月莺媛艳瑞凡佳嘉琼勤珍贞莉桂娣叶璧璐娅琦晶妍茜秋珊莎锦黛青倩婷姣婉娴瑾颖露瑶怡婵雁蓓纨仪荷丹蓉眉君琴蕊薇菁梦岚苑婕馨瑗琰韵融园艺咏卿聪澜纯毓悦昭冰爽琬茗羽希宁欣飘育滢馥筠柔竹霭凝晓欢霄枫芸菲寒伊亚宜可姬舒影荔枝思丽'
    # 男孩名字
    boy = '伟刚勇毅俊峰强军平保东文辉力明永健世广志义兴良海山仁波宁贵福生龙元全国胜学祥才发武新利清飞彬富顺信子杰涛昌成康星光天达安岩中茂进林有坚和彪博诚先敬震振壮会思群豪心邦承乐绍功松善厚庆磊民友裕河哲江超浩亮政谦亨奇固之轮翰朗伯宏言若鸣朋斌梁栋维启克伦翔旭鹏泽晨辰士以建家致树炎德行时泰盛雄琛钧冠策腾楠榕风航弘'
    # 名
    name = '中笑贝凯歌易仁器义礼智信友上都卡被好无九加电金马钰玉忠孝'

    # 10%的机遇生成双数姓氏
    if random.choice(range(100)) > 10:
        firstName_name = firstName[random.choice(range(len(firstName)))]
    else:
        i = random.choice(range(len(firstName2)))
        firstName_name = firstName2[i:i + 2]

    sex = random.choice(range(2))
    name_1 = ""
    # 生成并返回一个名字
    if sex > 0:
        girl_name = girl[random.choice(range(len(girl)))]
        if random.choice(range(2)) > 0:
            name_1 = name[random.choice(range(len(name)))]
        return firstName_name + name_1 + girl_name, "女"
    else:
        boy_name = boy[random.choice(range(len(boy)))]
        if random.choice(range(2)) > 0:
            name_1 = name[random.choice(range(len(name)))]
        return firstName_name + name_1 + boy_name, "男"


def load_school(file_path):
    import re
    data = open(file_path,'r').read()
    pat = r'[\u4e00-\u9fa5]+'
    obj = re.compile(pat)
    res = obj.findall(string=data)
    global school_list
    school_list.extend(res)


def create_base_text_without_score():  # 构造基本信息文本
    title_nation_number = random.randint(0, 1)
    title_province_number = random.randint(0, 5)
    school_number = random.randint(0, len(school_list)-1)
    age = random.randint(15, 60)
    name, sex = random_name()
    zhengzhimianmao_number = random.randint(0, 3)
    province_number = random.randint(0, len(province)-1)
    nation_number = random.randint(0, len(nation)-1)
    string1 = '姓名:'+name + ' '
    if random.randint(1, 5) >= 4:
        string1 += '性别：' + sex + ' '
    if random.randint(1, 5) >= 4:
        string1 += title_nation[title_nation_number] + ':' + nation[nation_number]+' '
    if random.randint(1, 5) >= 4:
        string1 += title_province[title_province_number] + ':' + province[province_number]+ ' '
    if random.randint(1, 5) >= 4:
        string1 += '毕业学校：'+school_list[school_number]+' '
    if random.randint(1, 5) >= 4:
        string1 += '政治面貌：' + zhengzhimianmao[zhengzhimianmao_number]
    if random.randint(1, 5) >= 4:
        string1 += zhengzhimianmao[zhengzhimianmao_number]+' '
    if random.randint(1, 5) >= 4:
        string1 += '年龄：' + str(age)
    if random.randint(1, 5) >= 4:
        phone_str = ''
        for i in range(11):
            num = phone[str(i)][random.choice(range(len(phone[str(i)])))]
            phone_str += str(num)
        prex = phone_prex[random.choice(range(len(phone_prex)))]
        phone_str = prex + ' ' + phone_str if prex != '' else phone_str
        string1 += ' '+random.choice(['联系方式：','联系电话：','电话：']) + phone_str
    email_name_len = random.randint(5, 14)
    emails = random.sample(character_list, email_name_len)
    emails = ''.join(emails)
    if random.randint(1, 5) >= 4:
        string1 += ' 邮箱：' + emails + random.choice(email)
    is_choose = random.randint(0,8)
    if is_choose >= 5:
        num = random.randint(1,5)
        social_account = ['微信:',
                          '知乎:',
                          'QQ:',
                         '微博:',
                         '博客:',
                         'Github:']
        social_list = random.sample(social_account, num)
        social_names = []
        for item in social_list:  # 选择的社交账号信息
            if item == '微信:' or item == '知乎:' or item == '微博:':
                name_len = random.randint(5, 16)
                cs = random.sample(character_list, name_len)
                name = ''.join(cs)
                social_names.append(name)
            elif item == '博客:':
                prex = random.choice(['','https://','http://'])
                blog_list = ['blog.csdn.net/', 'cnblogs.com/', 'jianshu.com/', 'juejin.im/']
                name_len = random.randint(5, 16)
                cs = random.sample(character_list, name_len)
                name = ''.join(cs)
                blog = prex + random.choice(blog_list) + name + '/'
                social_names.append(blog)
            elif item == 'Github:':
                prex = random.choice(['github.com/', 'https://github.com/', 'http://github.com/'])
                name_len = random.randint(5, 16)
                cs = random.sample(character_list, name_len)
                name = ''.join(cs)
                git = prex + name
                social_names.append(git)
            else:
                qq_str = ''
                length = random.randint(6, 11)
                for i in range(length):
                    num = phone[str(i)][random.choice(range(len(phone[str(i)])))]
                    qq_str += str(num)
                social_names.append(qq_str)
        string1 += ' ' + random.choice(['社交账号：', '社交信息：', ''])
        for i, social_name in enumerate(social_names):
            string1 += social_list[i] + social_name + ' '
    return string1


def create_edu_back_without_score():
    mode = random.randint(0, 2)
    year = random.randint(3, 5)
    edu_back = ''
    date_str = ''
    begin_year = random.randint(1975, 2020)
    if begin_year >= 2017:
        end_year = '至今'
        if mode > 1:
            date_str = str(begin_year) + '年' + str(random.randint(9, 10)) + '月' + '0' + str(random.randint(1, 2)) + '日' + \
                       '-' + '至今' + ' '
        else:
            date_str = str(begin_year) + '.' + str(random.randint(9, 10)) + '.' + '0' + str(random.randint(1, 2)) + \
                       '-' + '至今' + ' '
    else:
        end_year = begin_year + year
        if mode > 1:
            date_str = str(begin_year) + '年' + str(random.randint(9, 10)) + '月' + '0' + str(random.randint(1, 2)) + '日' + \
                       '-' + str(end_year) + '年' + '0' + str(random.randint(4, 7)) + '月' + '0' + str(random.randint(1, 2)) + '日' + ' '
        else:
            date_str = str(begin_year) + '.' + str(random.randint(9, 10)) + '.' + '0' + str(random.randint(1, 2)) + \
                       '-' + str(end_year) + '.' + '0' + str(random.randint(4, 7)) + '.' + '0' + str(
                random.randint(1, 2)) + ' '

    if random.randint(0, 3) > 0:
        edu_back += date_str
        if random.randint(0, 2) > 1:
            edu_back += '毕业院校:'
        school_name = random.choice(school_list)
        edu_back += school_name + ' '
        title_major_number = random.randint(0, len(title_major) - 1)
        title_grade_number = random.randint(0, len(title_grade) - 1)
        major_n = random.randint(0, len(major_list) - 1)
        grade_n = random.randint(0, len(grade_list) - 1)
        edu_back += title_grade[title_grade_number] + grade_list[grade_n] + ' '  # 所在专业
        edu_back += title_major[title_major_number] + major_list[major_n] + ' '  # 学历
    else:
        edu_back += '毕业院校:'
        school_name = random.choice(school_list)
        edu_back += school_name + ' '
        title_major_number = random.randint(0, len(title_major) - 1)
        title_grade_number = random.randint(0, len(title_grade) - 1)
        major_n = random.randint(0, len(major_list) - 1)
        grade_n = random.randint(0, len(grade_list) - 1)
        edu_back += title_grade[title_grade_number] + grade_list[grade_n] + ' '  # 所在专业
        edu_back += title_major[title_major_number] + major_list[major_n] + ' '  # 学历
    # 所修课程
    is_choose = random.randint(0, 1)
    if is_choose == 0:
        edu_back += '\n' + random.choice(['所修课程:', '主修科目:', '所修科目:', '主修课程:','主要课程:'])
        course_list1 = random.sample(course_list, random.randint(5, 12))
        course_txt = ' '.join(course_list1)
        edu_back += course_txt
    return edu_back


def create_skills_data_without_score():
    skill_list = random.sample(skill_stack,random.randint(5, 20))
    skill_text = ''
    for item in skill_list:
        random_weight_n = random.randint(0, len(describe_voc) - 1)
        skill_text += describe_voc[random_weight_n] + item + ' '
    return skill_text


def create_comments_self_data():
    comments_self = ' '
    for i in range(4):
        choose = random.randint(1, 2)
        text_index_list = random.sample(range(len(comment_dic[str(i*2+choose-1)])), 3)
        text = ''
        for item in text_index_list:
            text += ',' + (comment_dic[str(i * 2 + choose-1)][item])
        comments_self += ','+text
    return comments_self


def create_honor_data():
    honor = ' '
    num = random.randint(3, 8)
    cer_num_list = random.sample(range(len(certificate_list)), num)
    for item in cer_num_list:
        honor += certificate_list[item] + ' '
    return honor


def create_school_exp_data():
    school_exp = ' '
    num = random.randint(1, len(school_exp_dic1))
    thing_list = random.sample(school_exp_dic1.keys(), num)
    for item in thing_list:
        desc = random.choice(describe_school_exp)
        last_index = len(school_exp_dic1[item]) - 1
        desc1 = random.randint(0, last_index)
        if desc1 == last_index:
            desc1 = re.sub('x', item, school_exp_dic1[item][desc1])
            school_exp += desc + desc1 + ' '
        else:
            school_exp += desc + school_exp_dic1[item][desc1] + item + ' '
    return school_exp


time_word = {'1':['一','壹','1'], '2':['二','贰','2'], '3':['三','叁','3'], '4':['四','肆','4'], '5':['五','伍','5']
             , '6':['六','陆','6'], '7':['七','柒','7'], '8':['八','捌','8'], '9':['九','玖','9'], '0':['零','霊','9']
             }


def trans_to_chinese(number):  # number<=360
    pat = random.randint(0,1)  # 选用普通中文或者大写中文 0：普通，如一，二等，1：大写中文
    hundred = ['百','佰']
    ten = ['十','拾']
    txt = ''
    num3 = number // 100
    num2 = (number-num3*100)//10
    num1 = (number - num3*100 - num2*10)
    if num3 !=0:
        txt += time_word[str(num3)][pat]+hundred[pat]
    if num2 == 0 and num3!=0:
        txt += time_word[str(num2)][pat]
    if num2 != 0:
        txt += time_word[str(num2)][pat] + ten[pat]
    if num1 != 0:
        txt += time_word[str(num1)][pat]
    return txt


def choose_describe(pat,num):
    if pat ==0:
        return str(num)
    else:
        return trans_to_chinese(num)


def prob_reflex(time):
    """
    原先time为月数
    使得时间偏向于更小的数
    """
    if time <= 12:  # 1year
        return time
    elif time <=36:  # 3year
        num = random.randint(0, 3)
        if num <= 2:
            time //= 3
    elif time <= 72:  # 6year
        num = random.randint(0, 3)
        if num <= 2:
            time //= 4
    elif time <= 144:  # 12year
        num = random.randint(0, 6)
        if num <= 5:
            time //= 7
    else:  # 30year
        num = random.randint(0,12)
        if num <= 11:
            time //= 13
    return time


def create_other_data():
    f = open(OTHER_TXT_PATH, 'r', encoding='utf-8')
    txt = f.read()
    txt_list = txt.split('。')
    # print(len(txt_list))
    return random.sample(txt_list, k=len(txt_list))


def create_job_exp_data():
    job_exp = ' '
    num = random.randint(1,4)
    job_list = random.sample(place.keys(),num)
    for item in job_list:
        if random.randint(0,2) > 0:
            mode = random.randint(0, 2)
            year = random.randint(3, 5)
            date_str = ''
            begin_year = random.randint(1975, 2020)
            if begin_year >= 2017:
                end_year = '至今'
                if mode > 1:
                    date_str = str(begin_year) + '年' + str(random.randint(9, 10)) + '月' + '0' + str(
                        random.randint(1, 2)) + '日' + \
                               '-' + '至今' + ' '
                else:
                    date_str = str(begin_year) + '.' + str(random.randint(9, 10)) + '.' + '0' + str(random.randint(1, 2)) + \
                               '-' + '至今' + ' '
            else:
                end_year = begin_year + year
                if mode > 1:
                    date_str = str(begin_year) + '年' + str(random.randint(9, 10)) + '月' + '0' + str(
                        random.randint(1, 2)) + '日' + \
                               '-' + str(end_year) + '年' + '0' + str(random.randint(4, 7)) + '月' + '0' + str(
                        random.randint(1, 2)) + '日' + ' '
                else:
                    date_str = str(begin_year) + '.' + str(random.randint(9, 10)) + '.' + '0' + str(random.randint(1, 2)) + \
                               '-' + str(end_year) + '.' + '0' + str(random.randint(4, 7)) + '.' + '0' + str(
                        random.randint(1, 2)) + ' '
            if random.randint(0, 3) > 0:
                job_exp += date_str
                if random.randint(0, 2) > 1:
                    job_exp += random.choice(title_place)
                job_exp += item + ' '
                title_job_number = random.randint(0, len(title_job) - 1)
                job_n = random.randint(0, len(job) - 1)
                job_exp += title_job[title_job_number] + job[job_n] + ' '  # 职位名称
                title_job_describe_number = random.randint(0, len(title_job_describe) - 1)
                job_exp += title_job_describe[title_job_describe_number]
                job_describe_number = random.randint(0, len(job_describe) - 1)
                job_exp += job_describe[job_describe_number] + ' '

            else:
                if random.randint(0, 2) > 1:
                    job_exp += random.choice(title_place)
                job_exp += item + ' '
                title_job_number = random.randint(0, len(title_job) - 1)
                job_n = random.randint(0, len(job) - 1)
                job_exp += title_job[title_job_number] + job[job_n] + ' '  # 职位名称
                title_job_describe_number = random.randint(0, len(title_job_describe) - 1)
                job_exp += title_job_describe[title_job_describe_number]
                job_describe_number = random.randint(0, len(job_describe) - 1)
                job_exp += job_describe[job_describe_number] + ' '
        else:
            times = prob_reflex(random.randint(0, 360))
            year = times // 12
            month = times % 12
            time_txt = ''
            lis = ['半年','6个月']
            is_real = random.randint(0,1)  # 工作或者实习
            pats = random.randint(0,1)
            if year != 0:
                if month !=0:
                    if month != 6:
                        time_txt += choose_describe(pats,year) + '年' + choose_describe(pats,month) + '个月'
                    else:
                        pat = random.randint(0, 1)
                        time_txt += choose_describe(pats,year) + '年' + lis[pat]
                else:
                    time_txt += choose_describe(pats,year) + '年'
            elif month ==6:
                pat = random.randint(0,1)
                time_txt += lis[pat]
            else:
                time_txt += choose_describe(pats,year)+'个月'
            job_exp += '在'+item + time[is_real]+'过' +time_txt+' '
    return job_exp


def create_item_data(path):
    """
    :param path:项目资料所在路径
    创建项目经验
    :return:str
    """
    import copy
    with open(path, 'r', encoding='utf-8') as f:
        txt = f.read()
        item_list = txt.split('###')
        item_list1 = copy.copy(item_list)
        item_list = [(item, 9) for item in item_list]
    return random.sample(item_list, k=len(item_list))


# 创建停用词列表



def stopwordslist():
    stopwords = [line.strip() for line in open(STOP_LIST_PATH, encoding='UTF-8').readlines()]
    return stopwords


def load_cv_model(file_path):
    import joblib
    model = joblib.load(file_path)
    return model


def get_user_cookies(login_url, username, password, login_name='loginname', password_name='password', btn_name='login_btn'):
     '''
     获取JBOX的登录cookies
     模块第一次使用时通过账号密码获取cookie
     登录成功以后再申请cookie，读取模块中的缓存
     :param username: 用户名
     :param password: 密码
     :return: 返回一个dict,保存了cookies字典
     '''
     # 打开首页获取cookies
     global __jbox_cookies
     options = webdriver.ChromeOptions()
     prefs = {'profile.default_content_settings.popups': 0, 'download.default_directory': DOWNLOAD_RESUME_PATH1}
     options.add_experimental_option('prefs', prefs)
     driver = webdriver.Chrome(WEBDRIVER_PATH, options=options)
     driver.maximize_window()
     import time
     try:
         driver.get(login_url)
         name = driver.find_element_by_id(login_name)
         name.send_keys(username)
         print('?username')
         psd = driver.find_element_by_id(password_name)
         print('?password')
         print(psd.is_enabled())
         time.sleep(10)
         print('?btn')
         btn = driver.find_element_by_id(btn_name)
         btn.click()
         print('hello?')
         # 等待新页面出现的某个元素出现
         """
         wait = WebDriverWait(driver, 10)
         wait.until(EC.url_changes(login_url))
         """
         print('has changed to new url')
         if len(driver.get_cookies()) > 0:
             # print(driver.get_cookies()[0])
             for c in driver.get_cookies():
                 __jbox_cookies[c.get('name')] = c.get('value')
     except:
         time.sleep(10)
         driver.quit()
     # 如果没有登录成功，就提醒需要重新登录
     if not __jbox_cookies.keys():
         print('login fail')
     return driver, __jbox_cookies


def one_hot(label, label_number=None, list_length=None):
    """
    将指定标签转换为one_hot编码形式
    :param label:
    :param label_number:
    :param list_length:
    :return:
    """
    length = 0
    if isinstance(label, str):
        if not isinstance(label_number, dict):
            raise TypeError
        else:
            label = label_number[label]
            length = len(label_number)
    elif isinstance(label, int):
        if list_length is not None:
            length = list_length
        elif label_number is not None:
            length = len(label_number)
        else:
            raise TypeError
    elif isinstance(label, list):
        score = 1 / len(label)
        if list_length is not None:
            length = list_length
        elif label_number is not None:
            length = len(label_number)
        else:
            raise TypeError
        res = [0 for i in range(length)]
        for i in range(len(label)):
            res[label[i]] = score
        return res
    else:
        raise TypeError
    res = [0 for i in range(length)]
    res[label] = 1
    return res


def create_muti_classification_data(num=500, type='base_info'):
    """
    label_number = {'base_info': 0, 'edu_back': 1, 'job_exp': 2, 'self_comment': 3, 'school_exp': 4, 'honour': 5,
           'other': 6, 'sci_exp': 7,'skill': 8,'item_exp':9}
    """
    res_list = []
    if type == 'base_info':
        for i in range(num):
            txt = create_base_text_without_score()
            label = label_number[type]
            res_list.append((txt, label))
    elif type == 'edu_back':
        for i in range(num):
            txt = create_edu_back_without_score()
            label = label_number[type]
            res_list.append((txt, label))
    elif type == 'skill':
        for i in range(num):
            txt = create_skills_data_without_score()
            label = label_number[type]
            res_list.append((txt, label))
    elif type == 'self_comment':
        for i in range(num):
            txt = create_comments_self_data()
            label = label_number[type]
            res_list.append((txt, label))
    elif type == 'job_exp':
        for i in range(num):
            txt = create_job_exp_data()
            label = label_number[type]
            res_list.append((txt, label))
    elif type == 'honour':
        for i in range(num):
            txt = create_honor_data()
            label = label_number[type]
            res_list.append((txt, label))
    elif type == 'item_exp':
        res_list = create_item_data(ITEM_EXP_TXT_PATH)
    else:
        for i in range(num):
            txt = create_school_exp_data()
            label = label_number[type]
            res_list.append((txt, label))
    return res_list


if __name__ == '__main__':

    def test_download_resume_by_spider():
        import re
        import time
        last_url = r'https://jianli.51job.com/all/p629/'
        main_url = r'https://jianli.51job.com/all/p6/'
        login_url = r'https://login.51job.com/login.php?lang=c'
        driver, cookie = get_user_cookies(login_url, username='19850829532', password='xqq1226922778')
        global __header
        driver.get(main_url)
        # print(driver.page_source)
        count1 = 5
        last_flag = False
        while not last_flag:
            next_page = driver.find_element(By.LINK_TEXT, '下一页')
            href = next_page.get_attribute(name='href')
            res = re.search('p625', href)  # 检测是否是最后一页
            if not res:
                driver.get(href)
            else:
                last_flag = True
            count1 += 1
            print('第', count1, '页')
            down_right = driver.find_elements_by_class_name("down.right")
            count = 0
            # print(len(down_right))
            for element in down_right:
                webdriver.ActionChains(driver).move_to_element(element).click(element).perform()
                js = "setTimeout(function(){document.getElementById('action').click()},100)"
                driver.execute_script(js)
                if count > 30:
                    break
                count += 1
                time.sleep(0.3)
        driver.quit()


    def test_download_resume_on_zhiyequan(begin_page=3, end_page=40):
        import re
        import time
        account = '1536801671@qq.com'
        password = r'2269278'
        main_url = r'https://www.job592.com/doc/hot.html'
        login_url = r'https://my.job592.com/baike/home_login.action?tmp=doc&m=login&f=https%3A%2F%2Fwww.job592.com%2Fdoc%2Fhot.html'
        driver, cookie = get_user_cookies(login_url=login_url, username=account, password=password, login_name='login_regname', password_name='_login_passwd', btn_name='loginButton')
        # driver = webdriver.Chrome()
        count1 = begin_page
        link = ''
        time.sleep(7)
        while count1 < end_page:
            print('第', count1, '页')
            if count1 > begin_page:
                print(link)
                driver.get(link)
            count1 += 1
            link = 'https://www.job592.com/doc/hot.html?act=sou&pn=' + str(count1)
            print('now href is:', link)
            current_handle = driver.current_window_handle
            one_page = driver.find_elements_by_xpath('//div[@class="p-img"]//a')
            for href in one_page:
                webdriver.ActionChains(driver).move_to_element(href).click(href).perform()
                all_handles = driver.window_handles
                # 切换到第二个窗口
                driver.switch_to.window(all_handles[1])
                handle1 = driver.current_window_handle
                down_load_btn = None
                try:
                    down_load_btn = driver.find_element_by_xpath('//div[@class="down-doc"]//a')
                except:
                    driver.close()
                    driver.switch_to.window(current_handle)
                    continue
                webdriver.ActionChains(driver).move_to_element(down_load_btn).click(down_load_btn).perform()
                all_handles = driver.window_handles
                driver.switch_to.window(all_handles[2])
                comment = driver.find_element_by_id('content')
                comment.send_keys('你猜我会不会猜你在猜我知不知道你知道我是谁')
                down_btn = driver.find_element_by_class_name('btn.btn-5.mr20.down-btn')
                webdriver.ActionChains(driver).move_to_element(down_btn).click(down_btn).perform()
                time.sleep(5)
                driver.close()  # 关闭第三个窗口，回到第二个
                driver.switch_to.window(handle1)
                driver.close()  # 关闭第二个窗口，回到第一个
                driver.switch_to.window(current_handle)
                """
                for handle in all_handles:
                    if handle is not current_handle:
                        driver.switch_to.window(handle)
                        driver.close()
                        driver.switch_to.window(current_handle)
                """
        driver.quit()

    def test_random():
        print(len(create_item_data(ITEM_EXP_TXT_PATH)))
        # for i in range(20):
        #     print('')
        #     print('')
        #     print(create_job_exp_data())
        #     print('')
        #     print('')
        # global str1
        # str1 = re.findall('[\u4E00-\u9FD5]+', str1)
        # print(str1)

    def test_create_save_rnn_data():
        """
        测试生成并保存rnn模型所需数据集
        :return:
        """
        data_dir, label_dir = RNN_DATA_DATA_PATH1, RNN_DATA_LABEL_PATH1
        num = 1500
        # order_list是标题顺序
        base_info_path = RNN_BLOCK_DATA_PATH + '\\base_info\\base_info.txt'
        edu_back_path = RNN_BLOCK_DATA_PATH + '\\edu_back\\edu_back.txt'
        job_exp_path = RNN_BLOCK_DATA_PATH + '\\job_exp\\job_exp.txt'
        sci_exp_path = RNN_BLOCK_DATA_PATH + '\\sci_exp\\sci_exp.txt'
        other_path = RNN_BLOCK_DATA_PATH + '\\other\\other.txt'
        item_exp_path = RNN_BLOCK_DATA_PATH + '\\item_exp\\item_exp.txt'
        school_exp_path = RNN_BLOCK_DATA_PATH + '\\school_exp\\school_exp.txt'
        honour_path = RNN_BLOCK_DATA_PATH + '\\honour\\honour.txt'
        skill_path = RNN_BLOCK_DATA_PATH + '\\skill\\skill.txt'
        self_comment_path = RNN_BLOCK_DATA_PATH + '\\self_comment\\self_comment.txt'
        path_list = [base_info_path, edu_back_path, job_exp_path, self_comment_path, school_exp_path, honour_path, other_path, sci_exp_path, skill_path, item_exp_path]
        dics = {}  # 用于装载每一类别对应的文本列表
        for i, path in enumerate(path_list):
            with open(path, 'r', encoding='utf-8') as f:
                txt = f.read()
                txt_list = txt.split('********************************************************************')
                dics[number2label[i]] = txt_list
        order_list = open(TITLE_ORDER_PATH, 'r', encoding='utf-8').readlines()
        # 加载标题序列
        order_list1 = []
        for line in order_list:
            order = line.split(' ')
            order = [re.sub('\n', '', title) for title in order]
            order_list1.append(order)
        # 构造数据,num份
        resume_list = []
        label_list = []
        class_num = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # 存储每个类别的标签个数
        # for order in order_list1:
        #     print(order)
        # print(order_list1)
        for i in range(num):
            order = random.choice(order_list1)  # 随机选择一个标题序列进行构造
            # print('标题序列为：', order)
            one_resume = ['' for j in range(len(order))]  # 用于装载本标题序列对应的简历块文本内容
            one_resume_labels = []
            for j, title in enumerate(order):
                class_num[label_number[title]] += 1
                one_resume_labels.append(one_hot(title, label_number=label_number))
                module = random.choice(dics[title])
                one_resume[j] = module
            label_list.append(one_resume_labels)
            resume_list.append(one_resume)
        print('各类别分布为：', class_num)
        # 保存至本地
        # resume_list形状:[   [module_text1, module_text2,...],  [module_text1, module_text2,...]  , ...  ]，文本未进行预处理
        # label_list形状:[   [ one_hot1 , one_hot2 , ... ],  [ one_hot1 , one_hot2 , ... ]   ,  ...], one_hot为列表形式
        for i, resume in enumerate(resume_list):
            resume_txt = '###'.join(resume)
            with open(data_dir + '\\' + str(i) + '.txt', 'w', encoding='utf-8') as f:
                f.write(resume_txt)
        for i, resume_labels in enumerate(label_list):
            with open(label_dir + '\\' + str(i) + '.txt', 'w', encoding='utf-8') as f:
                for one_hot_label in resume_labels:  # one_hot_label 为一个列表，例如[1,0,0,0,0,0,0,0,0,0]
                    label_txt = ' '.join([str(i) for i in one_hot_label])
                    f.write(label_txt)
                    f.write('\n')


    def test_one_hot():
        print(one_hot('edu_back', label_number=label_number))

    # test_one_hot()
    # test_create_save_rnn_data()
    # test_download_resume_by_spider()
    # test_download_resume_on_zhiyequan()
    # test_random()
    test_create_save_rnn_data()
